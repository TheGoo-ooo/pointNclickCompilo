Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    FUNC
    IMG

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement ;
Rule 3     program -> statement ; program
Rule 4     statement -> ID = expression
Rule 5     statement -> structure
Rule 6     statement -> PRINT expression
Rule 7     structure -> WHILE ( expression ) { program }
Rule 8     structure -> IF ( expression ) { program }
Rule 9     structure -> : ID
Rule 10    scene -> SCENE ( STRING , [ id_list ] )
Rule 11    cli -> CLI ( STRING , rect )
Rule 12    rect -> RECT ( NUMBER , NUMBER , NUMBER , NUMBER )
Rule 13    id_list -> ID
Rule 14    id_list -> ID , id_list
Rule 15    expression -> expression ADD_OP expression
Rule 16    expression -> expression MULT_OP expression
Rule 17    expression -> NUMBER
Rule 18    expression -> ID
Rule 19    expression -> scene
Rule 20    expression -> CLI
Rule 21    expression -> ( expression )
Rule 22    expression -> ADD_OP expression

Terminals, with rules where they appear

(                    : 7 8 10 11 12 21
)                    : 7 8 10 11 12 21
,                    : 10 11 12 12 12 14
:                    : 9
;                    : 2 3
=                    : 4
ADD_OP               : 15 22
CLI                  : 11 20
FUNC                 : 
ID                   : 4 9 13 14 18
IF                   : 8
IMG                  : 
MULT_OP              : 16
NUMBER               : 12 12 12 12 17
PRINT                : 6
RECT                 : 12
SCENE                : 10
STRING               : 10 11
WHILE                : 7
[                    : 10
]                    : 10
error                : 
{                    : 7 8
}                    : 7 8

Nonterminals, with rules where they appear

cli                  : 
expression           : 4 6 7 8 15 15 16 16 21 22
id_list              : 10 14
program              : 3 7 8 0
rect                 : 11
scene                : 19
statement            : 1 2 3
structure            : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE ( expression ) { program }
    (8) structure -> . IF ( expression ) { program }
    (9) structure -> . : ID

    ID              shift and go to state 3
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    :               shift and go to state 8

    program                        shift and go to state 1
    statement                      shift and go to state 2
    structure                      shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . ;
    (3) program -> statement . ; program

    $end            reduce using rule 1 (program -> statement .)
    }               reduce using rule 1 (program -> statement .)
    ;               shift and go to state 9


state 3

    (4) statement -> ID . = expression

    =               shift and go to state 10


state 4

    (5) statement -> structure .

    ;               reduce using rule 5 (statement -> structure .)
    $end            reduce using rule 5 (statement -> structure .)
    }               reduce using rule 5 (statement -> structure .)


state 5

    (6) statement -> PRINT . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MULT_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . ID
    (19) expression -> . scene
    (20) expression -> . CLI
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression
    (10) scene -> . SCENE ( STRING , [ id_list ] )

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    CLI             shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 12
    SCENE           shift and go to state 18

    expression                     shift and go to state 11
    scene                          shift and go to state 15

state 6

    (7) structure -> WHILE . ( expression ) { program }

    (               shift and go to state 19


state 7

    (8) structure -> IF . ( expression ) { program }

    (               shift and go to state 20


state 8

    (9) structure -> : . ID

    ID              shift and go to state 21


state 9

    (2) program -> statement ; .
    (3) program -> statement ; . program
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE ( expression ) { program }
    (8) structure -> . IF ( expression ) { program }
    (9) structure -> . : ID

    $end            reduce using rule 2 (program -> statement ; .)
    }               reduce using rule 2 (program -> statement ; .)
    ID              shift and go to state 3
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    :               shift and go to state 8

    statement                      shift and go to state 2
    program                        shift and go to state 22
    structure                      shift and go to state 4

state 10

    (4) statement -> ID = . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MULT_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . ID
    (19) expression -> . scene
    (20) expression -> . CLI
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression
    (10) scene -> . SCENE ( STRING , [ id_list ] )

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    CLI             shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 12
    SCENE           shift and go to state 18

    expression                     shift and go to state 23
    scene                          shift and go to state 15

state 11

    (6) statement -> PRINT expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MULT_OP expression

    ;               reduce using rule 6 (statement -> PRINT expression .)
    $end            reduce using rule 6 (statement -> PRINT expression .)
    }               reduce using rule 6 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 24
    MULT_OP         shift and go to state 25


state 12

    (22) expression -> ADD_OP . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MULT_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . ID
    (19) expression -> . scene
    (20) expression -> . CLI
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression
    (10) scene -> . SCENE ( STRING , [ id_list ] )

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    CLI             shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 12
    SCENE           shift and go to state 18

    expression                     shift and go to state 26
    scene                          shift and go to state 15

state 13

    (17) expression -> NUMBER .

    ADD_OP          reduce using rule 17 (expression -> NUMBER .)
    MULT_OP         reduce using rule 17 (expression -> NUMBER .)
    ;               reduce using rule 17 (expression -> NUMBER .)
    $end            reduce using rule 17 (expression -> NUMBER .)
    }               reduce using rule 17 (expression -> NUMBER .)
    )               reduce using rule 17 (expression -> NUMBER .)


state 14

    (18) expression -> ID .

    ADD_OP          reduce using rule 18 (expression -> ID .)
    MULT_OP         reduce using rule 18 (expression -> ID .)
    ;               reduce using rule 18 (expression -> ID .)
    $end            reduce using rule 18 (expression -> ID .)
    }               reduce using rule 18 (expression -> ID .)
    )               reduce using rule 18 (expression -> ID .)


state 15

    (19) expression -> scene .

    ADD_OP          reduce using rule 19 (expression -> scene .)
    MULT_OP         reduce using rule 19 (expression -> scene .)
    ;               reduce using rule 19 (expression -> scene .)
    $end            reduce using rule 19 (expression -> scene .)
    }               reduce using rule 19 (expression -> scene .)
    )               reduce using rule 19 (expression -> scene .)


state 16

    (20) expression -> CLI .

    ADD_OP          reduce using rule 20 (expression -> CLI .)
    MULT_OP         reduce using rule 20 (expression -> CLI .)
    ;               reduce using rule 20 (expression -> CLI .)
    $end            reduce using rule 20 (expression -> CLI .)
    }               reduce using rule 20 (expression -> CLI .)
    )               reduce using rule 20 (expression -> CLI .)


state 17

    (21) expression -> ( . expression )
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MULT_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . ID
    (19) expression -> . scene
    (20) expression -> . CLI
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression
    (10) scene -> . SCENE ( STRING , [ id_list ] )

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    CLI             shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 12
    SCENE           shift and go to state 18

    expression                     shift and go to state 27
    scene                          shift and go to state 15

state 18

    (10) scene -> SCENE . ( STRING , [ id_list ] )

    (               shift and go to state 28


state 19

    (7) structure -> WHILE ( . expression ) { program }
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MULT_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . ID
    (19) expression -> . scene
    (20) expression -> . CLI
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression
    (10) scene -> . SCENE ( STRING , [ id_list ] )

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    CLI             shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 12
    SCENE           shift and go to state 18

    expression                     shift and go to state 29
    scene                          shift and go to state 15

state 20

    (8) structure -> IF ( . expression ) { program }
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MULT_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . ID
    (19) expression -> . scene
    (20) expression -> . CLI
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression
    (10) scene -> . SCENE ( STRING , [ id_list ] )

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    CLI             shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 12
    SCENE           shift and go to state 18

    expression                     shift and go to state 30
    scene                          shift and go to state 15

state 21

    (9) structure -> : ID .

    ;               reduce using rule 9 (structure -> : ID .)
    $end            reduce using rule 9 (structure -> : ID .)
    }               reduce using rule 9 (structure -> : ID .)


state 22

    (3) program -> statement ; program .

    $end            reduce using rule 3 (program -> statement ; program .)
    }               reduce using rule 3 (program -> statement ; program .)


state 23

    (4) statement -> ID = expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MULT_OP expression

    ;               reduce using rule 4 (statement -> ID = expression .)
    $end            reduce using rule 4 (statement -> ID = expression .)
    }               reduce using rule 4 (statement -> ID = expression .)
    ADD_OP          shift and go to state 24
    MULT_OP         shift and go to state 25


state 24

    (15) expression -> expression ADD_OP . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MULT_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . ID
    (19) expression -> . scene
    (20) expression -> . CLI
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression
    (10) scene -> . SCENE ( STRING , [ id_list ] )

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    CLI             shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 12
    SCENE           shift and go to state 18

    expression                     shift and go to state 31
    scene                          shift and go to state 15

state 25

    (16) expression -> expression MULT_OP . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MULT_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . ID
    (19) expression -> . scene
    (20) expression -> . CLI
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression
    (10) scene -> . SCENE ( STRING , [ id_list ] )

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    CLI             shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 12
    SCENE           shift and go to state 18

    expression                     shift and go to state 32
    scene                          shift and go to state 15

state 26

    (22) expression -> ADD_OP expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MULT_OP expression

    ADD_OP          reduce using rule 22 (expression -> ADD_OP expression .)
    MULT_OP         reduce using rule 22 (expression -> ADD_OP expression .)
    ;               reduce using rule 22 (expression -> ADD_OP expression .)
    $end            reduce using rule 22 (expression -> ADD_OP expression .)
    }               reduce using rule 22 (expression -> ADD_OP expression .)
    )               reduce using rule 22 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 24 ]
  ! MULT_OP         [ shift and go to state 25 ]


state 27

    (21) expression -> ( expression . )
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MULT_OP expression

    )               shift and go to state 33
    ADD_OP          shift and go to state 24
    MULT_OP         shift and go to state 25


state 28

    (10) scene -> SCENE ( . STRING , [ id_list ] )

    STRING          shift and go to state 34


state 29

    (7) structure -> WHILE ( expression . ) { program }
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MULT_OP expression

    )               shift and go to state 35
    ADD_OP          shift and go to state 24
    MULT_OP         shift and go to state 25


state 30

    (8) structure -> IF ( expression . ) { program }
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MULT_OP expression

    )               shift and go to state 36
    ADD_OP          shift and go to state 24
    MULT_OP         shift and go to state 25


state 31

    (15) expression -> expression ADD_OP expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MULT_OP expression

    ADD_OP          reduce using rule 15 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 15 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 15 (expression -> expression ADD_OP expression .)
    }               reduce using rule 15 (expression -> expression ADD_OP expression .)
    )               reduce using rule 15 (expression -> expression ADD_OP expression .)
    MULT_OP         shift and go to state 25

  ! MULT_OP         [ reduce using rule 15 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 24 ]


state 32

    (16) expression -> expression MULT_OP expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MULT_OP expression

    ADD_OP          reduce using rule 16 (expression -> expression MULT_OP expression .)
    MULT_OP         reduce using rule 16 (expression -> expression MULT_OP expression .)
    ;               reduce using rule 16 (expression -> expression MULT_OP expression .)
    $end            reduce using rule 16 (expression -> expression MULT_OP expression .)
    }               reduce using rule 16 (expression -> expression MULT_OP expression .)
    )               reduce using rule 16 (expression -> expression MULT_OP expression .)

  ! ADD_OP          [ shift and go to state 24 ]
  ! MULT_OP         [ shift and go to state 25 ]


state 33

    (21) expression -> ( expression ) .

    ADD_OP          reduce using rule 21 (expression -> ( expression ) .)
    MULT_OP         reduce using rule 21 (expression -> ( expression ) .)
    ;               reduce using rule 21 (expression -> ( expression ) .)
    $end            reduce using rule 21 (expression -> ( expression ) .)
    }               reduce using rule 21 (expression -> ( expression ) .)
    )               reduce using rule 21 (expression -> ( expression ) .)


state 34

    (10) scene -> SCENE ( STRING . , [ id_list ] )

    ,               shift and go to state 37


state 35

    (7) structure -> WHILE ( expression ) . { program }

    {               shift and go to state 38


state 36

    (8) structure -> IF ( expression ) . { program }

    {               shift and go to state 39


state 37

    (10) scene -> SCENE ( STRING , . [ id_list ] )

    [               shift and go to state 40


state 38

    (7) structure -> WHILE ( expression ) { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE ( expression ) { program }
    (8) structure -> . IF ( expression ) { program }
    (9) structure -> . : ID

    ID              shift and go to state 3
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    :               shift and go to state 8

    program                        shift and go to state 41
    statement                      shift and go to state 2
    structure                      shift and go to state 4

state 39

    (8) structure -> IF ( expression ) { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE ( expression ) { program }
    (8) structure -> . IF ( expression ) { program }
    (9) structure -> . : ID

    ID              shift and go to state 3
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    :               shift and go to state 8

    program                        shift and go to state 42
    statement                      shift and go to state 2
    structure                      shift and go to state 4

state 40

    (10) scene -> SCENE ( STRING , [ . id_list ] )
    (13) id_list -> . ID
    (14) id_list -> . ID , id_list

    ID              shift and go to state 44

    id_list                        shift and go to state 43

state 41

    (7) structure -> WHILE ( expression ) { program . }

    }               shift and go to state 45


state 42

    (8) structure -> IF ( expression ) { program . }

    }               shift and go to state 46


state 43

    (10) scene -> SCENE ( STRING , [ id_list . ] )

    ]               shift and go to state 47


state 44

    (13) id_list -> ID .
    (14) id_list -> ID . , id_list

    ]               reduce using rule 13 (id_list -> ID .)
    ,               shift and go to state 48


state 45

    (7) structure -> WHILE ( expression ) { program } .

    ;               reduce using rule 7 (structure -> WHILE ( expression ) { program } .)
    $end            reduce using rule 7 (structure -> WHILE ( expression ) { program } .)
    }               reduce using rule 7 (structure -> WHILE ( expression ) { program } .)


state 46

    (8) structure -> IF ( expression ) { program } .

    ;               reduce using rule 8 (structure -> IF ( expression ) { program } .)
    $end            reduce using rule 8 (structure -> IF ( expression ) { program } .)
    }               reduce using rule 8 (structure -> IF ( expression ) { program } .)


state 47

    (10) scene -> SCENE ( STRING , [ id_list ] . )

    )               shift and go to state 49


state 48

    (14) id_list -> ID , . id_list
    (13) id_list -> . ID
    (14) id_list -> . ID , id_list

    ID              shift and go to state 44

    id_list                        shift and go to state 50

state 49

    (10) scene -> SCENE ( STRING , [ id_list ] ) .

    ADD_OP          reduce using rule 10 (scene -> SCENE ( STRING , [ id_list ] ) .)
    MULT_OP         reduce using rule 10 (scene -> SCENE ( STRING , [ id_list ] ) .)
    ;               reduce using rule 10 (scene -> SCENE ( STRING , [ id_list ] ) .)
    $end            reduce using rule 10 (scene -> SCENE ( STRING , [ id_list ] ) .)
    }               reduce using rule 10 (scene -> SCENE ( STRING , [ id_list ] ) .)
    )               reduce using rule 10 (scene -> SCENE ( STRING , [ id_list ] ) .)


state 50

    (14) id_list -> ID , id_list .

    ]               reduce using rule 14 (id_list -> ID , id_list .)

