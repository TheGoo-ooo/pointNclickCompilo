Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement ;
Rule 3     program -> statement ; program
Rule 4     statement -> ID = expression
Rule 5     statement -> member = expression
Rule 6     statement -> structure
Rule 7     statement -> PRINT expression
Rule 8     structure -> WHILE ( expression ) { program }
Rule 9     structure -> IF ( expression ) { program }
Rule 10    structure -> : expression
Rule 11    scene -> SCENE ( expression , [ id_list ] )
Rule 12    cli -> CLI ( expression , rect ) { program }
Rule 13    rect -> RECT ( expression , expression , expression , expression )
Rule 14    id_list -> expression
Rule 15    id_list -> expression , id_list
Rule 16    expression -> expression ADD_OP expression
Rule 17    expression -> expression MULT_OP expression
Rule 18    expression -> NUMBER
Rule 19    expression -> ID
Rule 20    expression -> STRING
Rule 21    expression -> scene
Rule 22    expression -> { program }
Rule 23    expression -> ( expression )
Rule 24    member -> iden . climember
Rule 25    iden -> ID
Rule 26    climember -> FUNC
Rule 27    climember -> IMG
Rule 28    expression -> ADD_OP expression

Terminals, with rules where they appear

(                    : 8 9 11 12 13 23
)                    : 8 9 11 12 13 23
,                    : 11 12 13 13 13 15
.                    : 24
:                    : 10
;                    : 2 3
=                    : 4 5
ADD_OP               : 16 28
CLI                  : 12
FUNC                 : 26
ID                   : 4 19 25
IF                   : 9
IMG                  : 27
MULT_OP              : 17
NUMBER               : 18
PRINT                : 7
RECT                 : 13
SCENE                : 11
STRING               : 20
WHILE                : 8
[                    : 11
]                    : 11
error                : 
{                    : 8 9 12 22
}                    : 8 9 12 22

Nonterminals, with rules where they appear

cli                  : 
climember            : 24
expression           : 4 5 7 8 9 10 11 12 13 13 13 13 14 15 16 16 17 17 23 28
id_list              : 11 15
iden                 : 24
member               : 5
program              : 3 8 9 12 22 0
rect                 : 12
scene                : 21
statement            : 1 2 3
structure            : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . PRINT expression
    (24) member -> . iden . climember
    (8) structure -> . WHILE ( expression ) { program }
    (9) structure -> . IF ( expression ) { program }
    (10) structure -> . : expression
    (25) iden -> . ID

    ID              shift and go to state 3
    PRINT           shift and go to state 6
    WHILE           shift and go to state 8
    IF              shift and go to state 9
    :               shift and go to state 10

    program                        shift and go to state 1
    statement                      shift and go to state 2
    member                         shift and go to state 4
    structure                      shift and go to state 5
    iden                           shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . ;
    (3) program -> statement . ; program

    $end            reduce using rule 1 (program -> statement .)
    }               reduce using rule 1 (program -> statement .)
    ;               shift and go to state 11


state 3

    (4) statement -> ID . = expression
    (25) iden -> ID .

    =               shift and go to state 12
    .               reduce using rule 25 (iden -> ID .)


state 4

    (5) statement -> member . = expression

    =               shift and go to state 13


state 5

    (6) statement -> structure .

    ;               reduce using rule 6 (statement -> structure .)
    $end            reduce using rule 6 (statement -> structure .)
    }               reduce using rule 6 (statement -> structure .)


state 6

    (7) statement -> PRINT . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 14
    scene                          shift and go to state 19

state 7

    (24) member -> iden . . climember

    .               shift and go to state 23


state 8

    (8) structure -> WHILE . ( expression ) { program }

    (               shift and go to state 24


state 9

    (9) structure -> IF . ( expression ) { program }

    (               shift and go to state 25


state 10

    (10) structure -> : . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 26
    scene                          shift and go to state 19

state 11

    (2) program -> statement ; .
    (3) program -> statement ; . program
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . PRINT expression
    (24) member -> . iden . climember
    (8) structure -> . WHILE ( expression ) { program }
    (9) structure -> . IF ( expression ) { program }
    (10) structure -> . : expression
    (25) iden -> . ID

    $end            reduce using rule 2 (program -> statement ; .)
    }               reduce using rule 2 (program -> statement ; .)
    ID              shift and go to state 3
    PRINT           shift and go to state 6
    WHILE           shift and go to state 8
    IF              shift and go to state 9
    :               shift and go to state 10

    statement                      shift and go to state 2
    program                        shift and go to state 27
    member                         shift and go to state 4
    structure                      shift and go to state 5
    iden                           shift and go to state 7

state 12

    (4) statement -> ID = . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 28
    scene                          shift and go to state 19

state 13

    (5) statement -> member = . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 29
    scene                          shift and go to state 19

state 14

    (7) statement -> PRINT expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    ;               reduce using rule 7 (statement -> PRINT expression .)
    $end            reduce using rule 7 (statement -> PRINT expression .)
    }               reduce using rule 7 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 30
    MULT_OP         shift and go to state 31


state 15

    (28) expression -> ADD_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 32
    scene                          shift and go to state 19

state 16

    (18) expression -> NUMBER .

    ADD_OP          reduce using rule 18 (expression -> NUMBER .)
    MULT_OP         reduce using rule 18 (expression -> NUMBER .)
    ;               reduce using rule 18 (expression -> NUMBER .)
    $end            reduce using rule 18 (expression -> NUMBER .)
    }               reduce using rule 18 (expression -> NUMBER .)
    )               reduce using rule 18 (expression -> NUMBER .)
    ,               reduce using rule 18 (expression -> NUMBER .)
    ]               reduce using rule 18 (expression -> NUMBER .)


state 17

    (19) expression -> ID .

    ADD_OP          reduce using rule 19 (expression -> ID .)
    MULT_OP         reduce using rule 19 (expression -> ID .)
    ;               reduce using rule 19 (expression -> ID .)
    $end            reduce using rule 19 (expression -> ID .)
    }               reduce using rule 19 (expression -> ID .)
    )               reduce using rule 19 (expression -> ID .)
    ,               reduce using rule 19 (expression -> ID .)
    ]               reduce using rule 19 (expression -> ID .)


state 18

    (20) expression -> STRING .

    ADD_OP          reduce using rule 20 (expression -> STRING .)
    MULT_OP         reduce using rule 20 (expression -> STRING .)
    ;               reduce using rule 20 (expression -> STRING .)
    $end            reduce using rule 20 (expression -> STRING .)
    }               reduce using rule 20 (expression -> STRING .)
    )               reduce using rule 20 (expression -> STRING .)
    ,               reduce using rule 20 (expression -> STRING .)
    ]               reduce using rule 20 (expression -> STRING .)


state 19

    (21) expression -> scene .

    ADD_OP          reduce using rule 21 (expression -> scene .)
    MULT_OP         reduce using rule 21 (expression -> scene .)
    ;               reduce using rule 21 (expression -> scene .)
    $end            reduce using rule 21 (expression -> scene .)
    }               reduce using rule 21 (expression -> scene .)
    )               reduce using rule 21 (expression -> scene .)
    ,               reduce using rule 21 (expression -> scene .)
    ]               reduce using rule 21 (expression -> scene .)


state 20

    (22) expression -> { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . PRINT expression
    (24) member -> . iden . climember
    (8) structure -> . WHILE ( expression ) { program }
    (9) structure -> . IF ( expression ) { program }
    (10) structure -> . : expression
    (25) iden -> . ID

    ID              shift and go to state 3
    PRINT           shift and go to state 6
    WHILE           shift and go to state 8
    IF              shift and go to state 9
    :               shift and go to state 10

    program                        shift and go to state 33
    statement                      shift and go to state 2
    member                         shift and go to state 4
    structure                      shift and go to state 5
    iden                           shift and go to state 7

state 21

    (23) expression -> ( . expression )
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 34
    scene                          shift and go to state 19

state 22

    (11) scene -> SCENE . ( expression , [ id_list ] )

    (               shift and go to state 35


state 23

    (24) member -> iden . . climember
    (26) climember -> . FUNC
    (27) climember -> . IMG

    FUNC            shift and go to state 37
    IMG             shift and go to state 38

    climember                      shift and go to state 36

state 24

    (8) structure -> WHILE ( . expression ) { program }
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 39
    scene                          shift and go to state 19

state 25

    (9) structure -> IF ( . expression ) { program }
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 40
    scene                          shift and go to state 19

state 26

    (10) structure -> : expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    ;               reduce using rule 10 (structure -> : expression .)
    $end            reduce using rule 10 (structure -> : expression .)
    }               reduce using rule 10 (structure -> : expression .)
    ADD_OP          shift and go to state 30
    MULT_OP         shift and go to state 31


state 27

    (3) program -> statement ; program .

    $end            reduce using rule 3 (program -> statement ; program .)
    }               reduce using rule 3 (program -> statement ; program .)


state 28

    (4) statement -> ID = expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    ;               reduce using rule 4 (statement -> ID = expression .)
    $end            reduce using rule 4 (statement -> ID = expression .)
    }               reduce using rule 4 (statement -> ID = expression .)
    ADD_OP          shift and go to state 30
    MULT_OP         shift and go to state 31


state 29

    (5) statement -> member = expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    ;               reduce using rule 5 (statement -> member = expression .)
    $end            reduce using rule 5 (statement -> member = expression .)
    }               reduce using rule 5 (statement -> member = expression .)
    ADD_OP          shift and go to state 30
    MULT_OP         shift and go to state 31


state 30

    (16) expression -> expression ADD_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 41
    scene                          shift and go to state 19

state 31

    (17) expression -> expression MULT_OP . expression
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 42
    scene                          shift and go to state 19

state 32

    (28) expression -> ADD_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    ADD_OP          reduce using rule 28 (expression -> ADD_OP expression .)
    MULT_OP         reduce using rule 28 (expression -> ADD_OP expression .)
    ;               reduce using rule 28 (expression -> ADD_OP expression .)
    $end            reduce using rule 28 (expression -> ADD_OP expression .)
    }               reduce using rule 28 (expression -> ADD_OP expression .)
    )               reduce using rule 28 (expression -> ADD_OP expression .)
    ,               reduce using rule 28 (expression -> ADD_OP expression .)
    ]               reduce using rule 28 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 30 ]
  ! MULT_OP         [ shift and go to state 31 ]


state 33

    (22) expression -> { program . }

    }               shift and go to state 43


state 34

    (23) expression -> ( expression . )
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    )               shift and go to state 44
    ADD_OP          shift and go to state 30
    MULT_OP         shift and go to state 31


state 35

    (11) scene -> SCENE ( . expression , [ id_list ] )
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 45
    scene                          shift and go to state 19

state 36

    (24) member -> iden . climember .

    =               reduce using rule 24 (member -> iden . climember .)


state 37

    (26) climember -> FUNC .

    =               reduce using rule 26 (climember -> FUNC .)


state 38

    (27) climember -> IMG .

    =               reduce using rule 27 (climember -> IMG .)


state 39

    (8) structure -> WHILE ( expression . ) { program }
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    )               shift and go to state 46
    ADD_OP          shift and go to state 30
    MULT_OP         shift and go to state 31


state 40

    (9) structure -> IF ( expression . ) { program }
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    )               shift and go to state 47
    ADD_OP          shift and go to state 30
    MULT_OP         shift and go to state 31


state 41

    (16) expression -> expression ADD_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    ADD_OP          reduce using rule 16 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 16 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 16 (expression -> expression ADD_OP expression .)
    }               reduce using rule 16 (expression -> expression ADD_OP expression .)
    )               reduce using rule 16 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 16 (expression -> expression ADD_OP expression .)
    ]               reduce using rule 16 (expression -> expression ADD_OP expression .)
    MULT_OP         shift and go to state 31

  ! MULT_OP         [ reduce using rule 16 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 30 ]


state 42

    (17) expression -> expression MULT_OP expression .
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    ADD_OP          reduce using rule 17 (expression -> expression MULT_OP expression .)
    MULT_OP         reduce using rule 17 (expression -> expression MULT_OP expression .)
    ;               reduce using rule 17 (expression -> expression MULT_OP expression .)
    $end            reduce using rule 17 (expression -> expression MULT_OP expression .)
    }               reduce using rule 17 (expression -> expression MULT_OP expression .)
    )               reduce using rule 17 (expression -> expression MULT_OP expression .)
    ,               reduce using rule 17 (expression -> expression MULT_OP expression .)
    ]               reduce using rule 17 (expression -> expression MULT_OP expression .)

  ! ADD_OP          [ shift and go to state 30 ]
  ! MULT_OP         [ shift and go to state 31 ]


state 43

    (22) expression -> { program } .

    ADD_OP          reduce using rule 22 (expression -> { program } .)
    MULT_OP         reduce using rule 22 (expression -> { program } .)
    ;               reduce using rule 22 (expression -> { program } .)
    $end            reduce using rule 22 (expression -> { program } .)
    }               reduce using rule 22 (expression -> { program } .)
    )               reduce using rule 22 (expression -> { program } .)
    ,               reduce using rule 22 (expression -> { program } .)
    ]               reduce using rule 22 (expression -> { program } .)


state 44

    (23) expression -> ( expression ) .

    ADD_OP          reduce using rule 23 (expression -> ( expression ) .)
    MULT_OP         reduce using rule 23 (expression -> ( expression ) .)
    ;               reduce using rule 23 (expression -> ( expression ) .)
    $end            reduce using rule 23 (expression -> ( expression ) .)
    }               reduce using rule 23 (expression -> ( expression ) .)
    )               reduce using rule 23 (expression -> ( expression ) .)
    ,               reduce using rule 23 (expression -> ( expression ) .)
    ]               reduce using rule 23 (expression -> ( expression ) .)


state 45

    (11) scene -> SCENE ( expression . , [ id_list ] )
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    ,               shift and go to state 48
    ADD_OP          shift and go to state 30
    MULT_OP         shift and go to state 31


state 46

    (8) structure -> WHILE ( expression ) . { program }

    {               shift and go to state 49


state 47

    (9) structure -> IF ( expression ) . { program }

    {               shift and go to state 50


state 48

    (11) scene -> SCENE ( expression , . [ id_list ] )

    [               shift and go to state 51


state 49

    (8) structure -> WHILE ( expression ) { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . PRINT expression
    (24) member -> . iden . climember
    (8) structure -> . WHILE ( expression ) { program }
    (9) structure -> . IF ( expression ) { program }
    (10) structure -> . : expression
    (25) iden -> . ID

    ID              shift and go to state 3
    PRINT           shift and go to state 6
    WHILE           shift and go to state 8
    IF              shift and go to state 9
    :               shift and go to state 10

    program                        shift and go to state 52
    statement                      shift and go to state 2
    member                         shift and go to state 4
    structure                      shift and go to state 5
    iden                           shift and go to state 7

state 50

    (9) structure -> IF ( expression ) { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . PRINT expression
    (24) member -> . iden . climember
    (8) structure -> . WHILE ( expression ) { program }
    (9) structure -> . IF ( expression ) { program }
    (10) structure -> . : expression
    (25) iden -> . ID

    ID              shift and go to state 3
    PRINT           shift and go to state 6
    WHILE           shift and go to state 8
    IF              shift and go to state 9
    :               shift and go to state 10

    program                        shift and go to state 53
    statement                      shift and go to state 2
    member                         shift and go to state 4
    structure                      shift and go to state 5
    iden                           shift and go to state 7

state 51

    (11) scene -> SCENE ( expression , [ . id_list ] )
    (14) id_list -> . expression
    (15) id_list -> . expression , id_list
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 54
    id_list                        shift and go to state 55
    scene                          shift and go to state 19

state 52

    (8) structure -> WHILE ( expression ) { program . }

    }               shift and go to state 56


state 53

    (9) structure -> IF ( expression ) { program . }

    }               shift and go to state 57


state 54

    (14) id_list -> expression .
    (15) id_list -> expression . , id_list
    (16) expression -> expression . ADD_OP expression
    (17) expression -> expression . MULT_OP expression

    ]               reduce using rule 14 (id_list -> expression .)
    ,               shift and go to state 58
    ADD_OP          shift and go to state 30
    MULT_OP         shift and go to state 31


state 55

    (11) scene -> SCENE ( expression , [ id_list . ] )

    ]               shift and go to state 59


state 56

    (8) structure -> WHILE ( expression ) { program } .

    ;               reduce using rule 8 (structure -> WHILE ( expression ) { program } .)
    $end            reduce using rule 8 (structure -> WHILE ( expression ) { program } .)
    }               reduce using rule 8 (structure -> WHILE ( expression ) { program } .)


state 57

    (9) structure -> IF ( expression ) { program } .

    ;               reduce using rule 9 (structure -> IF ( expression ) { program } .)
    $end            reduce using rule 9 (structure -> IF ( expression ) { program } .)
    }               reduce using rule 9 (structure -> IF ( expression ) { program } .)


state 58

    (15) id_list -> expression , . id_list
    (14) id_list -> . expression
    (15) id_list -> . expression , id_list
    (16) expression -> . expression ADD_OP expression
    (17) expression -> . expression MULT_OP expression
    (18) expression -> . NUMBER
    (19) expression -> . ID
    (20) expression -> . STRING
    (21) expression -> . scene
    (22) expression -> . { program }
    (23) expression -> . ( expression )
    (28) expression -> . ADD_OP expression
    (11) scene -> . SCENE ( expression , [ id_list ] )

    NUMBER          shift and go to state 16
    ID              shift and go to state 17
    STRING          shift and go to state 18
    {               shift and go to state 20
    (               shift and go to state 21
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 22

    expression                     shift and go to state 54
    id_list                        shift and go to state 60
    scene                          shift and go to state 19

state 59

    (11) scene -> SCENE ( expression , [ id_list ] . )

    )               shift and go to state 61


state 60

    (15) id_list -> expression , id_list .

    ]               reduce using rule 15 (id_list -> expression , id_list .)


state 61

    (11) scene -> SCENE ( expression , [ id_list ] ) .

    ADD_OP          reduce using rule 11 (scene -> SCENE ( expression , [ id_list ] ) .)
    MULT_OP         reduce using rule 11 (scene -> SCENE ( expression , [ id_list ] ) .)
    ;               reduce using rule 11 (scene -> SCENE ( expression , [ id_list ] ) .)
    $end            reduce using rule 11 (scene -> SCENE ( expression , [ id_list ] ) .)
    }               reduce using rule 11 (scene -> SCENE ( expression , [ id_list ] ) .)
    )               reduce using rule 11 (scene -> SCENE ( expression , [ id_list ] ) .)
    ,               reduce using rule 11 (scene -> SCENE ( expression , [ id_list ] ) .)
    ]               reduce using rule 11 (scene -> SCENE ( expression , [ id_list ] ) .)

