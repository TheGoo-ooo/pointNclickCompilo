Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    SCENE
    FUNC
    IMG

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement ;
Rule 3     program -> statement ; program
Rule 4     statement -> ID = expression
Rule 5     statement -> structure
Rule 6     statement -> PRINT expression
Rule 7     structure -> WHILE ( expression ) { program }
Rule 8     structure -> IF ( expression ) { program }
Rule 9     structure -> : ID
Rule 10    cli -> CLI ( STRING , rect ) { program }
Rule 11    rect -> RECT ( expression , expression , expression , expression )
Rule 12    expression -> expression ADD_OP expression
Rule 13    expression -> expression MULT_OP expression
Rule 14    expression -> NUMBER
Rule 15    expression -> ID
Rule 16    expression -> cli
Rule 17    expression -> ( expression )
Rule 18    expression -> ADD_OP expression

Terminals, with rules where they appear

(                    : 7 8 10 11 17
)                    : 7 8 10 11 17
,                    : 10 11 11 11
:                    : 9
;                    : 2 3
=                    : 4
ADD_OP               : 12 18
CLI                  : 10
FUNC                 : 
ID                   : 4 9 15
IF                   : 8
IMG                  : 
MULT_OP              : 13
NUMBER               : 14
PRINT                : 6
RECT                 : 11
SCENE                : 
STRING               : 10
WHILE                : 7
error                : 
{                    : 7 8 10
}                    : 7 8 10

Nonterminals, with rules where they appear

cli                  : 16
expression           : 4 6 7 8 11 11 11 11 12 12 13 13 17 18
program              : 3 7 8 10 0
rect                 : 10
statement            : 1 2 3
structure            : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE ( expression ) { program }
    (8) structure -> . IF ( expression ) { program }
    (9) structure -> . : ID

    ID              shift and go to state 3
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    :               shift and go to state 8

    program                        shift and go to state 1
    statement                      shift and go to state 2
    structure                      shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . ;
    (3) program -> statement . ; program

    $end            reduce using rule 1 (program -> statement .)
    }               reduce using rule 1 (program -> statement .)
    ;               shift and go to state 9


state 3

    (4) statement -> ID . = expression

    =               shift and go to state 10


state 4

    (5) statement -> structure .

    ;               reduce using rule 5 (statement -> structure .)
    $end            reduce using rule 5 (statement -> structure .)
    }               reduce using rule 5 (statement -> structure .)


state 5

    (6) statement -> PRINT . expression
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 11
    cli                            shift and go to state 15

state 6

    (7) structure -> WHILE . ( expression ) { program }

    (               shift and go to state 18


state 7

    (8) structure -> IF . ( expression ) { program }

    (               shift and go to state 19


state 8

    (9) structure -> : . ID

    ID              shift and go to state 20


state 9

    (2) program -> statement ; .
    (3) program -> statement ; . program
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE ( expression ) { program }
    (8) structure -> . IF ( expression ) { program }
    (9) structure -> . : ID

    $end            reduce using rule 2 (program -> statement ; .)
    }               reduce using rule 2 (program -> statement ; .)
    ID              shift and go to state 3
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    :               shift and go to state 8

    statement                      shift and go to state 2
    program                        shift and go to state 21
    structure                      shift and go to state 4

state 10

    (4) statement -> ID = . expression
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 22
    cli                            shift and go to state 15

state 11

    (6) statement -> PRINT expression .
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    ;               reduce using rule 6 (statement -> PRINT expression .)
    $end            reduce using rule 6 (statement -> PRINT expression .)
    }               reduce using rule 6 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 23
    MULT_OP         shift and go to state 24


state 12

    (18) expression -> ADD_OP . expression
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 25
    cli                            shift and go to state 15

state 13

    (14) expression -> NUMBER .

    ADD_OP          reduce using rule 14 (expression -> NUMBER .)
    MULT_OP         reduce using rule 14 (expression -> NUMBER .)
    ;               reduce using rule 14 (expression -> NUMBER .)
    $end            reduce using rule 14 (expression -> NUMBER .)
    }               reduce using rule 14 (expression -> NUMBER .)
    )               reduce using rule 14 (expression -> NUMBER .)
    ,               reduce using rule 14 (expression -> NUMBER .)


state 14

    (15) expression -> ID .

    ADD_OP          reduce using rule 15 (expression -> ID .)
    MULT_OP         reduce using rule 15 (expression -> ID .)
    ;               reduce using rule 15 (expression -> ID .)
    $end            reduce using rule 15 (expression -> ID .)
    }               reduce using rule 15 (expression -> ID .)
    )               reduce using rule 15 (expression -> ID .)
    ,               reduce using rule 15 (expression -> ID .)


state 15

    (16) expression -> cli .

    ADD_OP          reduce using rule 16 (expression -> cli .)
    MULT_OP         reduce using rule 16 (expression -> cli .)
    ;               reduce using rule 16 (expression -> cli .)
    $end            reduce using rule 16 (expression -> cli .)
    }               reduce using rule 16 (expression -> cli .)
    )               reduce using rule 16 (expression -> cli .)
    ,               reduce using rule 16 (expression -> cli .)


state 16

    (17) expression -> ( . expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 26
    cli                            shift and go to state 15

state 17

    (10) cli -> CLI . ( STRING , rect ) { program }

    (               shift and go to state 27


state 18

    (7) structure -> WHILE ( . expression ) { program }
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 28
    cli                            shift and go to state 15

state 19

    (8) structure -> IF ( . expression ) { program }
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 29
    cli                            shift and go to state 15

state 20

    (9) structure -> : ID .

    ;               reduce using rule 9 (structure -> : ID .)
    $end            reduce using rule 9 (structure -> : ID .)
    }               reduce using rule 9 (structure -> : ID .)


state 21

    (3) program -> statement ; program .

    $end            reduce using rule 3 (program -> statement ; program .)
    }               reduce using rule 3 (program -> statement ; program .)


state 22

    (4) statement -> ID = expression .
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    ;               reduce using rule 4 (statement -> ID = expression .)
    $end            reduce using rule 4 (statement -> ID = expression .)
    }               reduce using rule 4 (statement -> ID = expression .)
    ADD_OP          shift and go to state 23
    MULT_OP         shift and go to state 24


state 23

    (12) expression -> expression ADD_OP . expression
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 30
    cli                            shift and go to state 15

state 24

    (13) expression -> expression MULT_OP . expression
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 31
    cli                            shift and go to state 15

state 25

    (18) expression -> ADD_OP expression .
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    ADD_OP          reduce using rule 18 (expression -> ADD_OP expression .)
    MULT_OP         reduce using rule 18 (expression -> ADD_OP expression .)
    ;               reduce using rule 18 (expression -> ADD_OP expression .)
    $end            reduce using rule 18 (expression -> ADD_OP expression .)
    }               reduce using rule 18 (expression -> ADD_OP expression .)
    )               reduce using rule 18 (expression -> ADD_OP expression .)
    ,               reduce using rule 18 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 23 ]
  ! MULT_OP         [ shift and go to state 24 ]


state 26

    (17) expression -> ( expression . )
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    )               shift and go to state 32
    ADD_OP          shift and go to state 23
    MULT_OP         shift and go to state 24


state 27

    (10) cli -> CLI ( . STRING , rect ) { program }

    STRING          shift and go to state 33


state 28

    (7) structure -> WHILE ( expression . ) { program }
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    )               shift and go to state 34
    ADD_OP          shift and go to state 23
    MULT_OP         shift and go to state 24


state 29

    (8) structure -> IF ( expression . ) { program }
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    )               shift and go to state 35
    ADD_OP          shift and go to state 23
    MULT_OP         shift and go to state 24


state 30

    (12) expression -> expression ADD_OP expression .
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    ADD_OP          reduce using rule 12 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 12 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 12 (expression -> expression ADD_OP expression .)
    }               reduce using rule 12 (expression -> expression ADD_OP expression .)
    )               reduce using rule 12 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 12 (expression -> expression ADD_OP expression .)
    MULT_OP         shift and go to state 24

  ! MULT_OP         [ reduce using rule 12 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 23 ]


state 31

    (13) expression -> expression MULT_OP expression .
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    ADD_OP          reduce using rule 13 (expression -> expression MULT_OP expression .)
    MULT_OP         reduce using rule 13 (expression -> expression MULT_OP expression .)
    ;               reduce using rule 13 (expression -> expression MULT_OP expression .)
    $end            reduce using rule 13 (expression -> expression MULT_OP expression .)
    }               reduce using rule 13 (expression -> expression MULT_OP expression .)
    )               reduce using rule 13 (expression -> expression MULT_OP expression .)
    ,               reduce using rule 13 (expression -> expression MULT_OP expression .)

  ! ADD_OP          [ shift and go to state 23 ]
  ! MULT_OP         [ shift and go to state 24 ]


state 32

    (17) expression -> ( expression ) .

    ADD_OP          reduce using rule 17 (expression -> ( expression ) .)
    MULT_OP         reduce using rule 17 (expression -> ( expression ) .)
    ;               reduce using rule 17 (expression -> ( expression ) .)
    $end            reduce using rule 17 (expression -> ( expression ) .)
    }               reduce using rule 17 (expression -> ( expression ) .)
    )               reduce using rule 17 (expression -> ( expression ) .)
    ,               reduce using rule 17 (expression -> ( expression ) .)


state 33

    (10) cli -> CLI ( STRING . , rect ) { program }

    ,               shift and go to state 36


state 34

    (7) structure -> WHILE ( expression ) . { program }

    {               shift and go to state 37


state 35

    (8) structure -> IF ( expression ) . { program }

    {               shift and go to state 38


state 36

    (10) cli -> CLI ( STRING , . rect ) { program }
    (11) rect -> . RECT ( expression , expression , expression , expression )

    RECT            shift and go to state 40

    rect                           shift and go to state 39

state 37

    (7) structure -> WHILE ( expression ) { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE ( expression ) { program }
    (8) structure -> . IF ( expression ) { program }
    (9) structure -> . : ID

    ID              shift and go to state 3
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    :               shift and go to state 8

    program                        shift and go to state 41
    statement                      shift and go to state 2
    structure                      shift and go to state 4

state 38

    (8) structure -> IF ( expression ) { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE ( expression ) { program }
    (8) structure -> . IF ( expression ) { program }
    (9) structure -> . : ID

    ID              shift and go to state 3
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    :               shift and go to state 8

    program                        shift and go to state 42
    statement                      shift and go to state 2
    structure                      shift and go to state 4

state 39

    (10) cli -> CLI ( STRING , rect . ) { program }

    )               shift and go to state 43


state 40

    (11) rect -> RECT . ( expression , expression , expression , expression )

    (               shift and go to state 44


state 41

    (7) structure -> WHILE ( expression ) { program . }

    }               shift and go to state 45


state 42

    (8) structure -> IF ( expression ) { program . }

    }               shift and go to state 46


state 43

    (10) cli -> CLI ( STRING , rect ) . { program }

    {               shift and go to state 47


state 44

    (11) rect -> RECT ( . expression , expression , expression , expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 48
    cli                            shift and go to state 15

state 45

    (7) structure -> WHILE ( expression ) { program } .

    ;               reduce using rule 7 (structure -> WHILE ( expression ) { program } .)
    $end            reduce using rule 7 (structure -> WHILE ( expression ) { program } .)
    }               reduce using rule 7 (structure -> WHILE ( expression ) { program } .)


state 46

    (8) structure -> IF ( expression ) { program } .

    ;               reduce using rule 8 (structure -> IF ( expression ) { program } .)
    $end            reduce using rule 8 (structure -> IF ( expression ) { program } .)
    }               reduce using rule 8 (structure -> IF ( expression ) { program } .)


state 47

    (10) cli -> CLI ( STRING , rect ) { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE ( expression ) { program }
    (8) structure -> . IF ( expression ) { program }
    (9) structure -> . : ID

    ID              shift and go to state 3
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    :               shift and go to state 8

    program                        shift and go to state 49
    statement                      shift and go to state 2
    structure                      shift and go to state 4

state 48

    (11) rect -> RECT ( expression . , expression , expression , expression )
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    ,               shift and go to state 50
    ADD_OP          shift and go to state 23
    MULT_OP         shift and go to state 24


state 49

    (10) cli -> CLI ( STRING , rect ) { program . }

    }               shift and go to state 51


state 50

    (11) rect -> RECT ( expression , . expression , expression , expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 52
    cli                            shift and go to state 15

state 51

    (10) cli -> CLI ( STRING , rect ) { program } .

    ADD_OP          reduce using rule 10 (cli -> CLI ( STRING , rect ) { program } .)
    MULT_OP         reduce using rule 10 (cli -> CLI ( STRING , rect ) { program } .)
    ;               reduce using rule 10 (cli -> CLI ( STRING , rect ) { program } .)
    $end            reduce using rule 10 (cli -> CLI ( STRING , rect ) { program } .)
    }               reduce using rule 10 (cli -> CLI ( STRING , rect ) { program } .)
    )               reduce using rule 10 (cli -> CLI ( STRING , rect ) { program } .)
    ,               reduce using rule 10 (cli -> CLI ( STRING , rect ) { program } .)


state 52

    (11) rect -> RECT ( expression , expression . , expression , expression )
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    ,               shift and go to state 53
    ADD_OP          shift and go to state 23
    MULT_OP         shift and go to state 24


state 53

    (11) rect -> RECT ( expression , expression , . expression , expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 54
    cli                            shift and go to state 15

state 54

    (11) rect -> RECT ( expression , expression , expression . , expression )
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    ,               shift and go to state 55
    ADD_OP          shift and go to state 23
    MULT_OP         shift and go to state 24


state 55

    (11) rect -> RECT ( expression , expression , expression , . expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MULT_OP expression
    (14) expression -> . NUMBER
    (15) expression -> . ID
    (16) expression -> . cli
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression
    (10) cli -> . CLI ( STRING , rect ) { program }

    NUMBER          shift and go to state 13
    ID              shift and go to state 14
    (               shift and go to state 16
    ADD_OP          shift and go to state 12
    CLI             shift and go to state 17

    expression                     shift and go to state 56
    cli                            shift and go to state 15

state 56

    (11) rect -> RECT ( expression , expression , expression , expression . )
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MULT_OP expression

    )               shift and go to state 57
    ADD_OP          shift and go to state 23
    MULT_OP         shift and go to state 24


state 57

    (11) rect -> RECT ( expression , expression , expression , expression ) .

    )               reduce using rule 11 (rect -> RECT ( expression , expression , expression , expression ) .)

