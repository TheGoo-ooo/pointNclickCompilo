Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement ;
Rule 3     program -> statement ; program
Rule 4     statement -> ID = expression
Rule 5     statement -> member = expression
Rule 6     statement -> structure
Rule 7     statement -> EMPTY
Rule 8     statement -> PRINT
Rule 9     structure -> WHILE ( expression ) { program }
Rule 10    structure -> IF ( expression ) { program }
Rule 11    structure -> : expression
Rule 12    scene -> SCENE ( expression , [ id_list ] )
Rule 13    cli -> CLI ( expression , rect ) { program }
Rule 14    rect -> RECT ( expression , expression , expression , expression )
Rule 15    id_list -> expression
Rule 16    id_list -> expression , id_list
Rule 17    expression -> expression ADD_OP expression
Rule 18    expression -> expression MULT_OP expression
Rule 19    expression -> NUMBER
Rule 20    expression -> ID
Rule 21    expression -> STRING
Rule 22    expression -> scene
Rule 23    expression -> cli
Rule 24    expression -> { program }
Rule 25    expression -> ( expression )
Rule 26    statement -> WAITONEFRAME
Rule 27    expression -> member
Rule 28    member -> expression . climember
Rule 29    expression -> expression < expression
Rule 30    expression -> expression > expression
Rule 31    expression -> expression < = expression
Rule 32    expression -> expression > = expression
Rule 33    expression -> expression [ expression ]
Rule 34    climember -> FUNC
Rule 35    climember -> IMG
Rule 36    climember -> X
Rule 37    climember -> Y
Rule 38    climember -> W
Rule 39    climember -> H
Rule 40    expression -> ADD_OP expression

Terminals, with rules where they appear

(                    : 9 10 12 13 14 25
)                    : 9 10 12 13 14 25
,                    : 12 13 14 14 14 16
.                    : 28
:                    : 11
;                    : 2 3
<                    : 29 31
=                    : 4 5 31 32
>                    : 30 32
ADD_OP               : 17 40
CLI                  : 13
EMPTY                : 7
FUNC                 : 34
H                    : 39
ID                   : 4 20
IF                   : 10
IMG                  : 35
MULT_OP              : 18
NUMBER               : 19
PRINT                : 8
RECT                 : 14
SCENE                : 12
STRING               : 21
W                    : 38
WAITONEFRAME         : 26
WHILE                : 9
X                    : 36
Y                    : 37
[                    : 12 33
]                    : 12 33
error                : 
{                    : 9 10 13 24
}                    : 9 10 13 24

Nonterminals, with rules where they appear

cli                  : 23
climember            : 28
expression           : 4 5 9 10 11 12 13 14 14 14 14 15 16 17 17 18 18 25 28 29 29 30 30 31 31 32 32 33 33 40
id_list              : 12 16
member               : 5 27
program              : 3 9 10 13 24 0
rect                 : 13
scene                : 22
statement            : 1 2 3
structure            : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . EMPTY
    (8) statement -> . PRINT
    (26) statement -> . WAITONEFRAME
    (28) member -> . expression . climember
    (9) structure -> . WHILE ( expression ) { program }
    (10) structure -> . IF ( expression ) { program }
    (11) structure -> . : expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }

    ID              shift and go to state 3
    EMPTY           shift and go to state 7
    PRINT           shift and go to state 8
    WAITONEFRAME    shift and go to state 9
    WHILE           shift and go to state 10
    IF              shift and go to state 13
    :               shift and go to state 14
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    program                        shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    member                         shift and go to state 5
    structure                      shift and go to state 6
    scene                          shift and go to state 18
    cli                            shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . ;
    (3) program -> statement . ; program

    $end            reduce using rule 1 (program -> statement .)
    }               reduce using rule 1 (program -> statement .)
    ;               shift and go to state 22


state 3

    (4) statement -> ID . = expression
    (20) expression -> ID .

    =               shift and go to state 23
    .               reduce using rule 20 (expression -> ID .)
    ADD_OP          reduce using rule 20 (expression -> ID .)
    MULT_OP         reduce using rule 20 (expression -> ID .)
    <               reduce using rule 20 (expression -> ID .)
    >               reduce using rule 20 (expression -> ID .)
    [               reduce using rule 20 (expression -> ID .)


state 4

    (28) member -> expression . . climember
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]

    .               shift and go to state 24
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29


state 5

    (5) statement -> member . = expression
    (27) expression -> member .

    =               shift and go to state 30
    .               reduce using rule 27 (expression -> member .)
    ADD_OP          reduce using rule 27 (expression -> member .)
    MULT_OP         reduce using rule 27 (expression -> member .)
    <               reduce using rule 27 (expression -> member .)
    >               reduce using rule 27 (expression -> member .)
    [               reduce using rule 27 (expression -> member .)


state 6

    (6) statement -> structure .

    ;               reduce using rule 6 (statement -> structure .)
    $end            reduce using rule 6 (statement -> structure .)
    }               reduce using rule 6 (statement -> structure .)


state 7

    (7) statement -> EMPTY .

    ;               reduce using rule 7 (statement -> EMPTY .)
    $end            reduce using rule 7 (statement -> EMPTY .)
    }               reduce using rule 7 (statement -> EMPTY .)


state 8

    (8) statement -> PRINT .

    ;               reduce using rule 8 (statement -> PRINT .)
    $end            reduce using rule 8 (statement -> PRINT .)
    }               reduce using rule 8 (statement -> PRINT .)


state 9

    (26) statement -> WAITONEFRAME .

    ;               reduce using rule 26 (statement -> WAITONEFRAME .)
    $end            reduce using rule 26 (statement -> WAITONEFRAME .)
    }               reduce using rule 26 (statement -> WAITONEFRAME .)


state 10

    (9) structure -> WHILE . ( expression ) { program }

    (               shift and go to state 31


state 11

    (25) expression -> ( . expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 32
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 12

    (24) expression -> { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . EMPTY
    (8) statement -> . PRINT
    (26) statement -> . WAITONEFRAME
    (28) member -> . expression . climember
    (9) structure -> . WHILE ( expression ) { program }
    (10) structure -> . IF ( expression ) { program }
    (11) structure -> . : expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }

    ID              shift and go to state 3
    EMPTY           shift and go to state 7
    PRINT           shift and go to state 8
    WAITONEFRAME    shift and go to state 9
    WHILE           shift and go to state 10
    IF              shift and go to state 13
    :               shift and go to state 14
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    program                        shift and go to state 35
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    member                         shift and go to state 5
    structure                      shift and go to state 6
    scene                          shift and go to state 18
    cli                            shift and go to state 19

state 13

    (10) structure -> IF . ( expression ) { program }

    (               shift and go to state 36


state 14

    (11) structure -> : . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 37
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 15

    (40) expression -> ADD_OP . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 38
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 16

    (19) expression -> NUMBER .

    .               reduce using rule 19 (expression -> NUMBER .)
    ADD_OP          reduce using rule 19 (expression -> NUMBER .)
    MULT_OP         reduce using rule 19 (expression -> NUMBER .)
    <               reduce using rule 19 (expression -> NUMBER .)
    >               reduce using rule 19 (expression -> NUMBER .)
    [               reduce using rule 19 (expression -> NUMBER .)
    )               reduce using rule 19 (expression -> NUMBER .)
    ;               reduce using rule 19 (expression -> NUMBER .)
    $end            reduce using rule 19 (expression -> NUMBER .)
    }               reduce using rule 19 (expression -> NUMBER .)
    ]               reduce using rule 19 (expression -> NUMBER .)
    ,               reduce using rule 19 (expression -> NUMBER .)


state 17

    (21) expression -> STRING .

    .               reduce using rule 21 (expression -> STRING .)
    ADD_OP          reduce using rule 21 (expression -> STRING .)
    MULT_OP         reduce using rule 21 (expression -> STRING .)
    <               reduce using rule 21 (expression -> STRING .)
    >               reduce using rule 21 (expression -> STRING .)
    [               reduce using rule 21 (expression -> STRING .)
    )               reduce using rule 21 (expression -> STRING .)
    ;               reduce using rule 21 (expression -> STRING .)
    $end            reduce using rule 21 (expression -> STRING .)
    }               reduce using rule 21 (expression -> STRING .)
    ]               reduce using rule 21 (expression -> STRING .)
    ,               reduce using rule 21 (expression -> STRING .)


state 18

    (22) expression -> scene .

    .               reduce using rule 22 (expression -> scene .)
    ADD_OP          reduce using rule 22 (expression -> scene .)
    MULT_OP         reduce using rule 22 (expression -> scene .)
    <               reduce using rule 22 (expression -> scene .)
    >               reduce using rule 22 (expression -> scene .)
    [               reduce using rule 22 (expression -> scene .)
    )               reduce using rule 22 (expression -> scene .)
    ;               reduce using rule 22 (expression -> scene .)
    $end            reduce using rule 22 (expression -> scene .)
    }               reduce using rule 22 (expression -> scene .)
    ]               reduce using rule 22 (expression -> scene .)
    ,               reduce using rule 22 (expression -> scene .)


state 19

    (23) expression -> cli .

    .               reduce using rule 23 (expression -> cli .)
    ADD_OP          reduce using rule 23 (expression -> cli .)
    MULT_OP         reduce using rule 23 (expression -> cli .)
    <               reduce using rule 23 (expression -> cli .)
    >               reduce using rule 23 (expression -> cli .)
    [               reduce using rule 23 (expression -> cli .)
    )               reduce using rule 23 (expression -> cli .)
    ;               reduce using rule 23 (expression -> cli .)
    $end            reduce using rule 23 (expression -> cli .)
    }               reduce using rule 23 (expression -> cli .)
    ]               reduce using rule 23 (expression -> cli .)
    ,               reduce using rule 23 (expression -> cli .)


state 20

    (12) scene -> SCENE . ( expression , [ id_list ] )

    (               shift and go to state 39


state 21

    (13) cli -> CLI . ( expression , rect ) { program }

    (               shift and go to state 40


state 22

    (2) program -> statement ; .
    (3) program -> statement ; . program
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . EMPTY
    (8) statement -> . PRINT
    (26) statement -> . WAITONEFRAME
    (28) member -> . expression . climember
    (9) structure -> . WHILE ( expression ) { program }
    (10) structure -> . IF ( expression ) { program }
    (11) structure -> . : expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }

    $end            reduce using rule 2 (program -> statement ; .)
    }               reduce using rule 2 (program -> statement ; .)
    ID              shift and go to state 3
    EMPTY           shift and go to state 7
    PRINT           shift and go to state 8
    WAITONEFRAME    shift and go to state 9
    WHILE           shift and go to state 10
    IF              shift and go to state 13
    :               shift and go to state 14
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    statement                      shift and go to state 2
    program                        shift and go to state 41
    expression                     shift and go to state 4
    member                         shift and go to state 5
    structure                      shift and go to state 6
    scene                          shift and go to state 18
    cli                            shift and go to state 19

state 23

    (4) statement -> ID = . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 42
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 24

    (28) member -> expression . . climember
    (34) climember -> . FUNC
    (35) climember -> . IMG
    (36) climember -> . X
    (37) climember -> . Y
    (38) climember -> . W
    (39) climember -> . H

    FUNC            shift and go to state 44
    IMG             shift and go to state 45
    X               shift and go to state 46
    Y               shift and go to state 47
    W               shift and go to state 48
    H               shift and go to state 49

    climember                      shift and go to state 43

state 25

    (17) expression -> expression ADD_OP . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 50
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 26

    (18) expression -> expression MULT_OP . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 51
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 27

    (29) expression -> expression < . expression
    (31) expression -> expression < . = expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    =               shift and go to state 53
    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 52
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 28

    (30) expression -> expression > . expression
    (32) expression -> expression > . = expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    =               shift and go to state 55
    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 54
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 29

    (33) expression -> expression [ . expression ]
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 56
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 30

    (5) statement -> member = . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    member                         shift and go to state 34
    expression                     shift and go to state 57
    scene                          shift and go to state 18
    cli                            shift and go to state 19

state 31

    (9) structure -> WHILE ( . expression ) { program }
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 58
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 32

    (25) expression -> ( expression . )
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    )               shift and go to state 59
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 33

    (20) expression -> ID .

    )               reduce using rule 20 (expression -> ID .)
    ADD_OP          reduce using rule 20 (expression -> ID .)
    MULT_OP         reduce using rule 20 (expression -> ID .)
    <               reduce using rule 20 (expression -> ID .)
    >               reduce using rule 20 (expression -> ID .)
    [               reduce using rule 20 (expression -> ID .)
    .               reduce using rule 20 (expression -> ID .)
    ;               reduce using rule 20 (expression -> ID .)
    $end            reduce using rule 20 (expression -> ID .)
    }               reduce using rule 20 (expression -> ID .)
    ]               reduce using rule 20 (expression -> ID .)
    ,               reduce using rule 20 (expression -> ID .)


state 34

    (27) expression -> member .

    )               reduce using rule 27 (expression -> member .)
    ADD_OP          reduce using rule 27 (expression -> member .)
    MULT_OP         reduce using rule 27 (expression -> member .)
    <               reduce using rule 27 (expression -> member .)
    >               reduce using rule 27 (expression -> member .)
    [               reduce using rule 27 (expression -> member .)
    .               reduce using rule 27 (expression -> member .)
    ;               reduce using rule 27 (expression -> member .)
    $end            reduce using rule 27 (expression -> member .)
    }               reduce using rule 27 (expression -> member .)
    ]               reduce using rule 27 (expression -> member .)
    ,               reduce using rule 27 (expression -> member .)


state 35

    (24) expression -> { program . }

    }               shift and go to state 60


state 36

    (10) structure -> IF ( . expression ) { program }
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 61
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 37

    (11) structure -> : expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    ;               reduce using rule 11 (structure -> : expression .)
    $end            reduce using rule 11 (structure -> : expression .)
    }               reduce using rule 11 (structure -> : expression .)
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 38

    (40) expression -> ADD_OP expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    .               reduce using rule 40 (expression -> ADD_OP expression .)
    ADD_OP          reduce using rule 40 (expression -> ADD_OP expression .)
    MULT_OP         reduce using rule 40 (expression -> ADD_OP expression .)
    <               reduce using rule 40 (expression -> ADD_OP expression .)
    >               reduce using rule 40 (expression -> ADD_OP expression .)
    [               reduce using rule 40 (expression -> ADD_OP expression .)
    )               reduce using rule 40 (expression -> ADD_OP expression .)
    ;               reduce using rule 40 (expression -> ADD_OP expression .)
    $end            reduce using rule 40 (expression -> ADD_OP expression .)
    }               reduce using rule 40 (expression -> ADD_OP expression .)
    ]               reduce using rule 40 (expression -> ADD_OP expression .)
    ,               reduce using rule 40 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 25 ]
  ! MULT_OP         [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! >               [ shift and go to state 28 ]
  ! [               [ shift and go to state 29 ]
  ! .               [ shift and go to state 24 ]


state 39

    (12) scene -> SCENE ( . expression , [ id_list ] )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 62
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 40

    (13) cli -> CLI ( . expression , rect ) { program }
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 63
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 41

    (3) program -> statement ; program .

    $end            reduce using rule 3 (program -> statement ; program .)
    }               reduce using rule 3 (program -> statement ; program .)


state 42

    (4) statement -> ID = expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    ;               reduce using rule 4 (statement -> ID = expression .)
    $end            reduce using rule 4 (statement -> ID = expression .)
    }               reduce using rule 4 (statement -> ID = expression .)
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 43

    (28) member -> expression . climember .

    =               reduce using rule 28 (member -> expression . climember .)
    .               reduce using rule 28 (member -> expression . climember .)
    ADD_OP          reduce using rule 28 (member -> expression . climember .)
    MULT_OP         reduce using rule 28 (member -> expression . climember .)
    <               reduce using rule 28 (member -> expression . climember .)
    >               reduce using rule 28 (member -> expression . climember .)
    [               reduce using rule 28 (member -> expression . climember .)
    )               reduce using rule 28 (member -> expression . climember .)
    ;               reduce using rule 28 (member -> expression . climember .)
    $end            reduce using rule 28 (member -> expression . climember .)
    }               reduce using rule 28 (member -> expression . climember .)
    ]               reduce using rule 28 (member -> expression . climember .)
    ,               reduce using rule 28 (member -> expression . climember .)


state 44

    (34) climember -> FUNC .

    =               reduce using rule 34 (climember -> FUNC .)
    .               reduce using rule 34 (climember -> FUNC .)
    ADD_OP          reduce using rule 34 (climember -> FUNC .)
    MULT_OP         reduce using rule 34 (climember -> FUNC .)
    <               reduce using rule 34 (climember -> FUNC .)
    >               reduce using rule 34 (climember -> FUNC .)
    [               reduce using rule 34 (climember -> FUNC .)
    )               reduce using rule 34 (climember -> FUNC .)
    ;               reduce using rule 34 (climember -> FUNC .)
    $end            reduce using rule 34 (climember -> FUNC .)
    }               reduce using rule 34 (climember -> FUNC .)
    ]               reduce using rule 34 (climember -> FUNC .)
    ,               reduce using rule 34 (climember -> FUNC .)


state 45

    (35) climember -> IMG .

    =               reduce using rule 35 (climember -> IMG .)
    .               reduce using rule 35 (climember -> IMG .)
    ADD_OP          reduce using rule 35 (climember -> IMG .)
    MULT_OP         reduce using rule 35 (climember -> IMG .)
    <               reduce using rule 35 (climember -> IMG .)
    >               reduce using rule 35 (climember -> IMG .)
    [               reduce using rule 35 (climember -> IMG .)
    )               reduce using rule 35 (climember -> IMG .)
    ;               reduce using rule 35 (climember -> IMG .)
    $end            reduce using rule 35 (climember -> IMG .)
    }               reduce using rule 35 (climember -> IMG .)
    ]               reduce using rule 35 (climember -> IMG .)
    ,               reduce using rule 35 (climember -> IMG .)


state 46

    (36) climember -> X .

    =               reduce using rule 36 (climember -> X .)
    .               reduce using rule 36 (climember -> X .)
    ADD_OP          reduce using rule 36 (climember -> X .)
    MULT_OP         reduce using rule 36 (climember -> X .)
    <               reduce using rule 36 (climember -> X .)
    >               reduce using rule 36 (climember -> X .)
    [               reduce using rule 36 (climember -> X .)
    )               reduce using rule 36 (climember -> X .)
    ;               reduce using rule 36 (climember -> X .)
    $end            reduce using rule 36 (climember -> X .)
    }               reduce using rule 36 (climember -> X .)
    ]               reduce using rule 36 (climember -> X .)
    ,               reduce using rule 36 (climember -> X .)


state 47

    (37) climember -> Y .

    =               reduce using rule 37 (climember -> Y .)
    .               reduce using rule 37 (climember -> Y .)
    ADD_OP          reduce using rule 37 (climember -> Y .)
    MULT_OP         reduce using rule 37 (climember -> Y .)
    <               reduce using rule 37 (climember -> Y .)
    >               reduce using rule 37 (climember -> Y .)
    [               reduce using rule 37 (climember -> Y .)
    )               reduce using rule 37 (climember -> Y .)
    ;               reduce using rule 37 (climember -> Y .)
    $end            reduce using rule 37 (climember -> Y .)
    }               reduce using rule 37 (climember -> Y .)
    ]               reduce using rule 37 (climember -> Y .)
    ,               reduce using rule 37 (climember -> Y .)


state 48

    (38) climember -> W .

    =               reduce using rule 38 (climember -> W .)
    .               reduce using rule 38 (climember -> W .)
    ADD_OP          reduce using rule 38 (climember -> W .)
    MULT_OP         reduce using rule 38 (climember -> W .)
    <               reduce using rule 38 (climember -> W .)
    >               reduce using rule 38 (climember -> W .)
    [               reduce using rule 38 (climember -> W .)
    )               reduce using rule 38 (climember -> W .)
    ;               reduce using rule 38 (climember -> W .)
    $end            reduce using rule 38 (climember -> W .)
    }               reduce using rule 38 (climember -> W .)
    ]               reduce using rule 38 (climember -> W .)
    ,               reduce using rule 38 (climember -> W .)


state 49

    (39) climember -> H .

    =               reduce using rule 39 (climember -> H .)
    .               reduce using rule 39 (climember -> H .)
    ADD_OP          reduce using rule 39 (climember -> H .)
    MULT_OP         reduce using rule 39 (climember -> H .)
    <               reduce using rule 39 (climember -> H .)
    >               reduce using rule 39 (climember -> H .)
    [               reduce using rule 39 (climember -> H .)
    )               reduce using rule 39 (climember -> H .)
    ;               reduce using rule 39 (climember -> H .)
    $end            reduce using rule 39 (climember -> H .)
    }               reduce using rule 39 (climember -> H .)
    ]               reduce using rule 39 (climember -> H .)
    ,               reduce using rule 39 (climember -> H .)


state 50

    (17) expression -> expression ADD_OP expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    .               reduce using rule 17 (expression -> expression ADD_OP expression .)
    ADD_OP          reduce using rule 17 (expression -> expression ADD_OP expression .)
    <               reduce using rule 17 (expression -> expression ADD_OP expression .)
    >               reduce using rule 17 (expression -> expression ADD_OP expression .)
    [               reduce using rule 17 (expression -> expression ADD_OP expression .)
    )               reduce using rule 17 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 17 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 17 (expression -> expression ADD_OP expression .)
    }               reduce using rule 17 (expression -> expression ADD_OP expression .)
    ]               reduce using rule 17 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 17 (expression -> expression ADD_OP expression .)
    MULT_OP         shift and go to state 26

  ! MULT_OP         [ reduce using rule 17 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 25 ]
  ! <               [ shift and go to state 27 ]
  ! >               [ shift and go to state 28 ]
  ! [               [ shift and go to state 29 ]
  ! .               [ shift and go to state 24 ]


state 51

    (18) expression -> expression MULT_OP expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    .               reduce using rule 18 (expression -> expression MULT_OP expression .)
    ADD_OP          reduce using rule 18 (expression -> expression MULT_OP expression .)
    MULT_OP         reduce using rule 18 (expression -> expression MULT_OP expression .)
    <               reduce using rule 18 (expression -> expression MULT_OP expression .)
    >               reduce using rule 18 (expression -> expression MULT_OP expression .)
    [               reduce using rule 18 (expression -> expression MULT_OP expression .)
    )               reduce using rule 18 (expression -> expression MULT_OP expression .)
    ;               reduce using rule 18 (expression -> expression MULT_OP expression .)
    $end            reduce using rule 18 (expression -> expression MULT_OP expression .)
    }               reduce using rule 18 (expression -> expression MULT_OP expression .)
    ]               reduce using rule 18 (expression -> expression MULT_OP expression .)
    ,               reduce using rule 18 (expression -> expression MULT_OP expression .)

  ! ADD_OP          [ shift and go to state 25 ]
  ! MULT_OP         [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! >               [ shift and go to state 28 ]
  ! [               [ shift and go to state 29 ]
  ! .               [ shift and go to state 24 ]


state 52

    (29) expression -> expression < expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    )               reduce using rule 29 (expression -> expression < expression .)
    ;               reduce using rule 29 (expression -> expression < expression .)
    $end            reduce using rule 29 (expression -> expression < expression .)
    }               reduce using rule 29 (expression -> expression < expression .)
    ]               reduce using rule 29 (expression -> expression < expression .)
    ,               reduce using rule 29 (expression -> expression < expression .)
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24

  ! .               [ reduce using rule 29 (expression -> expression < expression .) ]
  ! ADD_OP          [ reduce using rule 29 (expression -> expression < expression .) ]
  ! MULT_OP         [ reduce using rule 29 (expression -> expression < expression .) ]
  ! <               [ reduce using rule 29 (expression -> expression < expression .) ]
  ! >               [ reduce using rule 29 (expression -> expression < expression .) ]
  ! [               [ reduce using rule 29 (expression -> expression < expression .) ]


state 53

    (31) expression -> expression < = . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 64
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 54

    (30) expression -> expression > expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    )               reduce using rule 30 (expression -> expression > expression .)
    ;               reduce using rule 30 (expression -> expression > expression .)
    $end            reduce using rule 30 (expression -> expression > expression .)
    }               reduce using rule 30 (expression -> expression > expression .)
    ]               reduce using rule 30 (expression -> expression > expression .)
    ,               reduce using rule 30 (expression -> expression > expression .)
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24

  ! .               [ reduce using rule 30 (expression -> expression > expression .) ]
  ! ADD_OP          [ reduce using rule 30 (expression -> expression > expression .) ]
  ! MULT_OP         [ reduce using rule 30 (expression -> expression > expression .) ]
  ! <               [ reduce using rule 30 (expression -> expression > expression .) ]
  ! >               [ reduce using rule 30 (expression -> expression > expression .) ]
  ! [               [ reduce using rule 30 (expression -> expression > expression .) ]


state 55

    (32) expression -> expression > = . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 65
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 56

    (33) expression -> expression [ expression . ]
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    ]               shift and go to state 66
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 57

    (5) statement -> member = expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    ;               reduce using rule 5 (statement -> member = expression .)
    $end            reduce using rule 5 (statement -> member = expression .)
    }               reduce using rule 5 (statement -> member = expression .)
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 58

    (9) structure -> WHILE ( expression . ) { program }
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    )               shift and go to state 67
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 59

    (25) expression -> ( expression ) .

    .               reduce using rule 25 (expression -> ( expression ) .)
    ADD_OP          reduce using rule 25 (expression -> ( expression ) .)
    MULT_OP         reduce using rule 25 (expression -> ( expression ) .)
    <               reduce using rule 25 (expression -> ( expression ) .)
    >               reduce using rule 25 (expression -> ( expression ) .)
    [               reduce using rule 25 (expression -> ( expression ) .)
    )               reduce using rule 25 (expression -> ( expression ) .)
    ;               reduce using rule 25 (expression -> ( expression ) .)
    $end            reduce using rule 25 (expression -> ( expression ) .)
    }               reduce using rule 25 (expression -> ( expression ) .)
    ]               reduce using rule 25 (expression -> ( expression ) .)
    ,               reduce using rule 25 (expression -> ( expression ) .)


state 60

    (24) expression -> { program } .

    .               reduce using rule 24 (expression -> { program } .)
    ADD_OP          reduce using rule 24 (expression -> { program } .)
    MULT_OP         reduce using rule 24 (expression -> { program } .)
    <               reduce using rule 24 (expression -> { program } .)
    >               reduce using rule 24 (expression -> { program } .)
    [               reduce using rule 24 (expression -> { program } .)
    )               reduce using rule 24 (expression -> { program } .)
    ;               reduce using rule 24 (expression -> { program } .)
    $end            reduce using rule 24 (expression -> { program } .)
    }               reduce using rule 24 (expression -> { program } .)
    ]               reduce using rule 24 (expression -> { program } .)
    ,               reduce using rule 24 (expression -> { program } .)


state 61

    (10) structure -> IF ( expression . ) { program }
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    )               shift and go to state 68
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 62

    (12) scene -> SCENE ( expression . , [ id_list ] )
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    ,               shift and go to state 69
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 63

    (13) cli -> CLI ( expression . , rect ) { program }
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    ,               shift and go to state 70
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 64

    (31) expression -> expression < = expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    )               reduce using rule 31 (expression -> expression < = expression .)
    ;               reduce using rule 31 (expression -> expression < = expression .)
    $end            reduce using rule 31 (expression -> expression < = expression .)
    }               reduce using rule 31 (expression -> expression < = expression .)
    ]               reduce using rule 31 (expression -> expression < = expression .)
    ,               reduce using rule 31 (expression -> expression < = expression .)
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24

  ! .               [ reduce using rule 31 (expression -> expression < = expression .) ]
  ! ADD_OP          [ reduce using rule 31 (expression -> expression < = expression .) ]
  ! MULT_OP         [ reduce using rule 31 (expression -> expression < = expression .) ]
  ! <               [ reduce using rule 31 (expression -> expression < = expression .) ]
  ! >               [ reduce using rule 31 (expression -> expression < = expression .) ]
  ! [               [ reduce using rule 31 (expression -> expression < = expression .) ]


state 65

    (32) expression -> expression > = expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    )               reduce using rule 32 (expression -> expression > = expression .)
    ;               reduce using rule 32 (expression -> expression > = expression .)
    $end            reduce using rule 32 (expression -> expression > = expression .)
    }               reduce using rule 32 (expression -> expression > = expression .)
    ]               reduce using rule 32 (expression -> expression > = expression .)
    ,               reduce using rule 32 (expression -> expression > = expression .)
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24

  ! .               [ reduce using rule 32 (expression -> expression > = expression .) ]
  ! ADD_OP          [ reduce using rule 32 (expression -> expression > = expression .) ]
  ! MULT_OP         [ reduce using rule 32 (expression -> expression > = expression .) ]
  ! <               [ reduce using rule 32 (expression -> expression > = expression .) ]
  ! >               [ reduce using rule 32 (expression -> expression > = expression .) ]
  ! [               [ reduce using rule 32 (expression -> expression > = expression .) ]


state 66

    (33) expression -> expression [ expression ] .

    .               reduce using rule 33 (expression -> expression [ expression ] .)
    ADD_OP          reduce using rule 33 (expression -> expression [ expression ] .)
    MULT_OP         reduce using rule 33 (expression -> expression [ expression ] .)
    <               reduce using rule 33 (expression -> expression [ expression ] .)
    >               reduce using rule 33 (expression -> expression [ expression ] .)
    [               reduce using rule 33 (expression -> expression [ expression ] .)
    )               reduce using rule 33 (expression -> expression [ expression ] .)
    ;               reduce using rule 33 (expression -> expression [ expression ] .)
    $end            reduce using rule 33 (expression -> expression [ expression ] .)
    }               reduce using rule 33 (expression -> expression [ expression ] .)
    ]               reduce using rule 33 (expression -> expression [ expression ] .)
    ,               reduce using rule 33 (expression -> expression [ expression ] .)


state 67

    (9) structure -> WHILE ( expression ) . { program }

    {               shift and go to state 71


state 68

    (10) structure -> IF ( expression ) . { program }

    {               shift and go to state 72


state 69

    (12) scene -> SCENE ( expression , . [ id_list ] )

    [               shift and go to state 73


state 70

    (13) cli -> CLI ( expression , . rect ) { program }
    (14) rect -> . RECT ( expression , expression , expression , expression )

    RECT            shift and go to state 75

    rect                           shift and go to state 74

state 71

    (9) structure -> WHILE ( expression ) { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . EMPTY
    (8) statement -> . PRINT
    (26) statement -> . WAITONEFRAME
    (28) member -> . expression . climember
    (9) structure -> . WHILE ( expression ) { program }
    (10) structure -> . IF ( expression ) { program }
    (11) structure -> . : expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }

    ID              shift and go to state 3
    EMPTY           shift and go to state 7
    PRINT           shift and go to state 8
    WAITONEFRAME    shift and go to state 9
    WHILE           shift and go to state 10
    IF              shift and go to state 13
    :               shift and go to state 14
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 4
    program                        shift and go to state 76
    statement                      shift and go to state 2
    member                         shift and go to state 5
    structure                      shift and go to state 6
    scene                          shift and go to state 18
    cli                            shift and go to state 19

state 72

    (10) structure -> IF ( expression ) { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . EMPTY
    (8) statement -> . PRINT
    (26) statement -> . WAITONEFRAME
    (28) member -> . expression . climember
    (9) structure -> . WHILE ( expression ) { program }
    (10) structure -> . IF ( expression ) { program }
    (11) structure -> . : expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }

    ID              shift and go to state 3
    EMPTY           shift and go to state 7
    PRINT           shift and go to state 8
    WAITONEFRAME    shift and go to state 9
    WHILE           shift and go to state 10
    IF              shift and go to state 13
    :               shift and go to state 14
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 4
    program                        shift and go to state 77
    statement                      shift and go to state 2
    member                         shift and go to state 5
    structure                      shift and go to state 6
    scene                          shift and go to state 18
    cli                            shift and go to state 19

state 73

    (12) scene -> SCENE ( expression , [ . id_list ] )
    (15) id_list -> . expression
    (16) id_list -> . expression , id_list
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 78
    id_list                        shift and go to state 79
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 74

    (13) cli -> CLI ( expression , rect . ) { program }

    )               shift and go to state 80


state 75

    (14) rect -> RECT . ( expression , expression , expression , expression )

    (               shift and go to state 81


state 76

    (9) structure -> WHILE ( expression ) { program . }

    }               shift and go to state 82


state 77

    (10) structure -> IF ( expression ) { program . }

    }               shift and go to state 83


state 78

    (15) id_list -> expression .
    (16) id_list -> expression . , id_list
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    ]               reduce using rule 15 (id_list -> expression .)
    ,               shift and go to state 84
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 79

    (12) scene -> SCENE ( expression , [ id_list . ] )

    ]               shift and go to state 85


state 80

    (13) cli -> CLI ( expression , rect ) . { program }

    {               shift and go to state 86


state 81

    (14) rect -> RECT ( . expression , expression , expression , expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 87
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 82

    (9) structure -> WHILE ( expression ) { program } .

    ;               reduce using rule 9 (structure -> WHILE ( expression ) { program } .)
    $end            reduce using rule 9 (structure -> WHILE ( expression ) { program } .)
    }               reduce using rule 9 (structure -> WHILE ( expression ) { program } .)


state 83

    (10) structure -> IF ( expression ) { program } .

    ;               reduce using rule 10 (structure -> IF ( expression ) { program } .)
    $end            reduce using rule 10 (structure -> IF ( expression ) { program } .)
    }               reduce using rule 10 (structure -> IF ( expression ) { program } .)


state 84

    (16) id_list -> expression , . id_list
    (15) id_list -> . expression
    (16) id_list -> . expression , id_list
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 78
    id_list                        shift and go to state 88
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 85

    (12) scene -> SCENE ( expression , [ id_list ] . )

    )               shift and go to state 89


state 86

    (13) cli -> CLI ( expression , rect ) { . program }
    (1) program -> . statement
    (2) program -> . statement ;
    (3) program -> . statement ; program
    (4) statement -> . ID = expression
    (5) statement -> . member = expression
    (6) statement -> . structure
    (7) statement -> . EMPTY
    (8) statement -> . PRINT
    (26) statement -> . WAITONEFRAME
    (28) member -> . expression . climember
    (9) structure -> . WHILE ( expression ) { program }
    (10) structure -> . IF ( expression ) { program }
    (11) structure -> . : expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }

    ID              shift and go to state 3
    EMPTY           shift and go to state 7
    PRINT           shift and go to state 8
    WAITONEFRAME    shift and go to state 9
    WHILE           shift and go to state 10
    IF              shift and go to state 13
    :               shift and go to state 14
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 4
    program                        shift and go to state 90
    statement                      shift and go to state 2
    member                         shift and go to state 5
    structure                      shift and go to state 6
    scene                          shift and go to state 18
    cli                            shift and go to state 19

state 87

    (14) rect -> RECT ( expression . , expression , expression , expression )
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    ,               shift and go to state 91
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 88

    (16) id_list -> expression , id_list .

    ]               reduce using rule 16 (id_list -> expression , id_list .)


state 89

    (12) scene -> SCENE ( expression , [ id_list ] ) .

    .               reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    ADD_OP          reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    MULT_OP         reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    <               reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    >               reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    [               reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    )               reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    ;               reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    $end            reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    }               reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    ]               reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)
    ,               reduce using rule 12 (scene -> SCENE ( expression , [ id_list ] ) .)


state 90

    (13) cli -> CLI ( expression , rect ) { program . }

    }               shift and go to state 92


state 91

    (14) rect -> RECT ( expression , . expression , expression , expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 93
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 92

    (13) cli -> CLI ( expression , rect ) { program } .

    .               reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    ADD_OP          reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    MULT_OP         reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    <               reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    >               reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    [               reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    )               reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    ;               reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    $end            reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    }               reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    ]               reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)
    ,               reduce using rule 13 (cli -> CLI ( expression , rect ) { program } .)


state 93

    (14) rect -> RECT ( expression , expression . , expression , expression )
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    ,               shift and go to state 94
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 94

    (14) rect -> RECT ( expression , expression , . expression , expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 95
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 95

    (14) rect -> RECT ( expression , expression , expression . , expression )
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    ,               shift and go to state 96
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 96

    (14) rect -> RECT ( expression , expression , expression , . expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MULT_OP expression
    (19) expression -> . NUMBER
    (20) expression -> . ID
    (21) expression -> . STRING
    (22) expression -> . scene
    (23) expression -> . cli
    (24) expression -> . { program }
    (25) expression -> . ( expression )
    (27) expression -> . member
    (29) expression -> . expression < expression
    (30) expression -> . expression > expression
    (31) expression -> . expression < = expression
    (32) expression -> . expression > = expression
    (33) expression -> . expression [ expression ]
    (40) expression -> . ADD_OP expression
    (12) scene -> . SCENE ( expression , [ id_list ] )
    (13) cli -> . CLI ( expression , rect ) { program }
    (28) member -> . expression . climember

    NUMBER          shift and go to state 16
    ID              shift and go to state 33
    STRING          shift and go to state 17
    {               shift and go to state 12
    (               shift and go to state 11
    ADD_OP          shift and go to state 15
    SCENE           shift and go to state 20
    CLI             shift and go to state 21

    expression                     shift and go to state 97
    scene                          shift and go to state 18
    cli                            shift and go to state 19
    member                         shift and go to state 34

state 97

    (14) rect -> RECT ( expression , expression , expression , expression . )
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MULT_OP expression
    (29) expression -> expression . < expression
    (30) expression -> expression . > expression
    (31) expression -> expression . < = expression
    (32) expression -> expression . > = expression
    (33) expression -> expression . [ expression ]
    (28) member -> expression . . climember

    )               shift and go to state 98
    ADD_OP          shift and go to state 25
    MULT_OP         shift and go to state 26
    <               shift and go to state 27
    >               shift and go to state 28
    [               shift and go to state 29
    .               shift and go to state 24


state 98

    (14) rect -> RECT ( expression , expression , expression , expression ) .

    )               reduce using rule 14 (rect -> RECT ( expression , expression , expression , expression ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for < in state 52 resolved as shift
WARNING: shift/reduce conflict for > in state 52 resolved as shift
WARNING: shift/reduce conflict for [ in state 52 resolved as shift
WARNING: shift/reduce conflict for . in state 52 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 54 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 54 resolved as shift
WARNING: shift/reduce conflict for < in state 54 resolved as shift
WARNING: shift/reduce conflict for > in state 54 resolved as shift
WARNING: shift/reduce conflict for [ in state 54 resolved as shift
WARNING: shift/reduce conflict for . in state 54 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 64 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 64 resolved as shift
WARNING: shift/reduce conflict for < in state 64 resolved as shift
WARNING: shift/reduce conflict for > in state 64 resolved as shift
WARNING: shift/reduce conflict for [ in state 64 resolved as shift
WARNING: shift/reduce conflict for . in state 64 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 65 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 65 resolved as shift
WARNING: shift/reduce conflict for < in state 65 resolved as shift
WARNING: shift/reduce conflict for > in state 65 resolved as shift
WARNING: shift/reduce conflict for [ in state 65 resolved as shift
WARNING: shift/reduce conflict for . in state 65 resolved as shift
